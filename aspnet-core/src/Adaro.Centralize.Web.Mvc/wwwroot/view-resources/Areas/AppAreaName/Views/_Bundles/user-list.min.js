var PermissionsTree = (function ($) {
  return function () {
    var $tree;

    function initFiltering() {
      var to = false;
      $('#PermissionTreeFilter').keyup(function () {
        if (to) {
          clearTimeout(to);
        }
        to = setTimeout(function () {
          var v = $('#PermissionTreeFilter').val();
          if ($tree.jstree(true)) {
            $tree.jstree(true).search(v);
          }
        }, 250);
      });
    }

    function init($treeContainer, options) {
      $tree = $treeContainer;
      initialized = false;
      var _jsTreeOptions = {
        types: {
          default: {
            icon: 'fa fa-folder text-warning',
          },
          file: {
            icon: 'fa fa-file text-warning',
          },
        },
        checkbox: {
          keep_selected_style: false,
          three_state: false,
          cascade: '',
        },
        search: {
          show_only_matches: true,
        },
        plugins: ['checkbox', 'types', 'search'],
      };

      if (options) {
        if (options.singleSelect && options.singleSelect === true) {
          $.extend(_jsTreeOptions, {
            core: {
              multiple: false,
            },
          });
        }
      }

      $tree.jstree(_jsTreeOptions);
      if (
        !(
          options &&
          ((options.singleSelect && options.singleSelect === true) ||
            (options.disableCascade && options.disableCascade === true))
        )
      ) {
        $tree.on('changed.jstree', function (e, data) {
          if (!data.node) {
            return;
          }

          var childrenNodes;

          if (data.node.state.selected) {
            selectNodeAndAllParents($tree.jstree('get_parent', data.node));

            childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
            $tree.jstree('select_node', childrenNodes);
          } else {
            childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
            $tree.jstree('deselect_node', childrenNodes);
          }
        });
      }

      initFiltering();
    }

    function selectNodeAndAllParents(node) {
      $tree.jstree('select_node', node, true);
      var parent = $tree.jstree('get_parent', node);
      if (parent) {
        selectNodeAndAllParents(parent);
      }
    }

    function getSelectedPermissionNames() {
      var permissionNames = [];

      var selectedPermissions = $tree.jstree('get_selected', true);
      for (var i = 0; i < selectedPermissions.length; i++) {
        permissionNames.push(selectedPermissions[i].id);
      }

      return permissionNames;
    }

    return {
      init: init,
      getSelectedPermissionNames: getSelectedPermissionNames,
    };
  };
})(jQuery);

(function () {
  app.modals.PermissionTreeModal = function () {
    var _modalManager;
    var _permissionsTree = null;

    var _options = {
      onSelectionDone: function () {},
    };

    this.init = function (modalManager) {
      _modalManager = modalManager;
      _options = $.extend(_options, _modalManager.getOptions().options);

      _permissionsTree = new PermissionsTree();
      _permissionsTree.init(
        _modalManager.getModal().find('#PermissionFilterTree .permission-tree'),
        _modalManager.getOptions().options
      );

      _modalManager.onBeforeClose(function () {
        if (typeof _options.onSelectionDone == 'function') {
          _options.onSelectionDone(_permissionsTree.getSelectedPermissionNames());
        }
      });
    };
  };

  app.modals.PermissionTreeModal.create = function (options) {
    return new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/Common/PermissionTreeModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/Common/Modals/_PermissionTreeModal.js',
      modalClass: 'PermissionTreeModal',
      options: options,
      removeAllOnCloseBindsAfterModalClose: true,
    });
  };
})();

var OrganizationTree = (function ($) {
  return function () {
    var $tree;
    var $defaultOptions = {
      cascadeSelectEnabled: true,
    };

    function initFiltering() {
      var to = false;
      $('#OrganizationTreeFilter').keyup(function () {
        if (to) {
          clearTimeout(to);
        }
        to = setTimeout(function () {
          var v = $('#OrganizationTreeFilter').val();
          $tree.jstree(true).search(v);
        }, 250);
      });
    }

    function init($treeContainer, $options) {
      $options = $.extend($defaultOptions, $options);

      $tree = $treeContainer;
      $tree.jstree({
        types: {
          default: {
            icon: 'fa fa-folder text-warning',
          },
          file: {
            icon: 'fa fa-file text-warning',
          },
        },
        checkbox: {
          keep_selected_style: false,
          three_state: false,
          cascade: '',
        },
        search: {
          show_only_matches: true,
        },
        plugins: ['checkbox', 'types', 'search'],
      });

      $tree.on('changed.jstree', function (e, data) {
        if (!$options.cascadeSelectEnabled) {
          return;
        }

        if (!data.node) {
          return;
        }

        var childrenNodes;

        if (data.node.state.selected) {
          selectNodeAndAllParents($tree.jstree('get_parent', data.node));

          childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
          $tree.jstree('select_node', childrenNodes);
        } else {
          childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
          $tree.jstree('deselect_node', childrenNodes);
        }
      });

      initFiltering();
    }

    function selectNodeAndAllParents(node) {
      $tree.jstree('select_node', node, true);
      var parent = $tree.jstree('get_parent', node);
      if (parent) {
        selectNodeAndAllParents(parent);
      }
    }

    function getSelectedOrganizations() {
      var organizationIds = [];

      var selectedOrganizations = $tree.jstree('get_selected', true);
      for (var i = 0; i < selectedOrganizations.length; i++) {
        organizationIds.push({
          id: selectedOrganizations[i].id,
          displayName: selectedOrganizations[i].text.trimStart().trimEnd()
        });
      }

      return organizationIds;
    }
    
    function getSelectedOrganizationIds() {
      var organizationIds = [];

      var selectedOrganizations = $tree.jstree('get_selected', true);
      for (var i = 0; i < selectedOrganizations.length; i++) {
        organizationIds.push(selectedOrganizations[i].id);
      }

      return organizationIds;
    }

    return {
      init: init,
      getSelectedOrganizationIds: getSelectedOrganizationIds,
      getSelectedOrganizations: getSelectedOrganizations
    };
  };
})(jQuery);

(function ($) {
  app.modals.CreateOrEditUserModal = function () {
    var _userService = abp.services.app.user;

    var _modalManager;
    var _$userInformationForm = null;
    var _passwordComplexityHelper = new app.PasswordComplexityHelper();
    var _organizationTree;

    var changeProfilePictureModal = new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/Profile/ChangePictureModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/Profile/_ChangePictureModal.js',
      modalClass: 'ChangeProfilePictureModal',
    });

    function _findAssignedRoleNames() {
      var assignedRoleNames = [];

      _modalManager
        .getModal()
        .find('.user-role-checkbox-list input[type=checkbox]')
        .each(function () {
          if ($(this).is(':checked') && !$(this).is(':disabled')) {
            assignedRoleNames.push($(this).attr('name'));
          }
        });

      return assignedRoleNames;
    }

    this.init = function (modalManager) {
      _modalManager = modalManager;

      _organizationTree = new OrganizationTree();
      _organizationTree.init(_modalManager.getModal().find('.organization-tree'), {
        cascadeSelectEnabled: false,
      });

      _$userInformationForm = _modalManager.getModal().find('form[name=UserInformationsForm]');
      _$userInformationForm.validate();

      var passwordInputs = _modalManager.getModal().find('input[name=Password],input[name=PasswordRepeat]');
      var passwordInputGroups = passwordInputs.closest('.user-password');

      _passwordComplexityHelper.setPasswordComplexityRules(passwordInputs, window.passwordComplexitySetting);

      $('#EditUser_SetRandomPassword').change(function () {
        if ($(this).is(':checked')) {
          passwordInputGroups.slideUp('fast');
          if (!_modalManager.getArgs().id) {
            passwordInputs.removeAttr('required');
          }
        } else {
          passwordInputGroups.slideDown('fast');
          if (!_modalManager.getArgs().id) {
            passwordInputs.attr('required', 'required');
          }
        }
      });

      _modalManager
        .getModal()
        .find('.user-role-checkbox-list input[type=checkbox]')
        .change(function () {
          $('#assigned-role-count').text(_findAssignedRoleNames().length);
        });

      _modalManager.getModal().find('[data-bs-toggle=tooltip]').tooltip();

      _modalManager
        .getModal()
        .find('#changeProfilePicture')
        .click(function () {
          changeProfilePictureModal.open({userId: _modalManager.getModal().find('input[name=Id]').val()});
        });

      changeProfilePictureModal.onClose(function () {
          _modalManager.getModal().find('.user-edit-dialog-profile-image').attr('src', abp.appPath + "Profile/GetProfilePictureByUser?userId="+ _modalManager.getModal().find('input[name=Id]').val())        
      });
    };

    this.save = function () {
      if (!_$userInformationForm.valid()) {
        return;
      }

      var assignedRoleNames = _findAssignedRoleNames();
      var user = _$userInformationForm.serializeFormToObject();

      if (user.SetRandomPassword) {
        user.Password = null;
      }

      _modalManager.setBusy(true);
      _userService
        .createOrUpdateUser({
          user: user,
          assignedRoleNames: assignedRoleNames,
          sendActivationEmail: user.SendActivationEmail,
          SetRandomPassword: user.SetRandomPassword,
          organizationUnits: _organizationTree.getSelectedOrganizationIds(),
        })
        .done(function () {
          abp.notify.info(app.localize('SavedSuccessfully'));
          _modalManager.close();
          abp.event.trigger('app.createOrEditUserModalSaved');
        })
        .always(function () {
          _modalManager.setBusy(false);
        });
    };
  };
})(jQuery);

(function () {
  app.modals.UserPermissionsModal = function () {
    var _userService = abp.services.app.user;

    var _modalManager;
    var _permissionsTree;

    function _resetUserSpecificPermissions() {
      _modalManager.setBusy(true);
      _userService
        .resetUserSpecificPermissions({
          id: _modalManager.getArgs().id,
        })
        .done(function () {
          abp.notify.info(app.localize('ResetSuccessfully'));
          _modalManager.getModal().on('hidden.bs.modal', function (e) {
            _modalManager.reopen();
          });
          _modalManager.close();
        })
        .always(function () {
          _modalManager.setBusy(false);
        });
    }

    this.init = function (modalManager) {
      _modalManager = modalManager;

      _permissionsTree = new PermissionsTree();
      _permissionsTree.init(_modalManager.getModal().find('.permission-tree'));

      _modalManager.getModal().find('[data-bs-toggle=tooltip]').tooltip();

      _modalManager
        .getModal()
        .find('.reset-permissions-button')
        .click(function () {
          _resetUserSpecificPermissions();
        });
    };

    this.save = function () {
      _modalManager.setBusy(true);
      _userService
        .updateUserPermissions({
          id: _modalManager.getArgs().id,
          grantedPermissionNames: _permissionsTree.getSelectedPermissionNames(),
        })
        .done(function () {
          abp.notify.info(app.localize('SavedSuccessfully'));
          _modalManager.close();
        })
        .always(function () {
          _modalManager.setBusy(false);
        });
    };
  };
})();

(function () {
  $(function () {
    var _$usersTable = $('#UsersTable');
    var _userService = abp.services.app.user;
    var _$numberOfFilteredPermission = $('#NumberOfFilteredPermission');
    var _dynamicEntityPropertyManager = new DynamicEntityPropertyManager();

    var _selectedPermissionNames = [];

    var _$permissionFilterModal = app.modals.PermissionTreeModal.create({
      disableCascade: true,
      onSelectionDone: function (filteredPermissions) {
        _selectedPermissionNames = filteredPermissions;
        var filteredPermissionCount = filteredPermissions.length;

        _$numberOfFilteredPermission.text(filteredPermissionCount);
        abp.notify.success(app.localize('XCountPermissionFiltered', filteredPermissionCount));

        getUsers();
      },
    });

    var _permissions = {
      create: abp.auth.hasPermission('Pages.Administration.Users.Create'),
      edit: abp.auth.hasPermission('Pages.Administration.Users.Edit'),
      changePermissions: abp.auth.hasPermission('Pages.Administration.Users.ChangePermissions'),
      impersonation: abp.auth.hasPermission('Pages.Administration.Users.Impersonation'),
      unlock: abp.auth.hasPermission('Pages.Administration.Users.Unlock'),
      delete: abp.auth.hasPermission('Pages.Administration.Users.Delete'),
    };

    var _createOrEditModal = new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/Users/CreateOrEditModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/Users/_CreateOrEditModal.js',
      modalClass: 'CreateOrEditUserModal',
    });

    var _userPermissionsModal = new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/Users/PermissionsModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/Users/_PermissionsModal.js',
      modalClass: 'UserPermissionsModal',
    });

    var dataTable = _$usersTable.DataTable({
      paging: true,
      serverSide: true,
      processing: true,
      listAction: {
        ajaxFunction: _userService.getUsers,
        inputFilter: function () {
          return {
            filter: $('#UsersTableFilter').val(),
            permissions: _selectedPermissionNames,
            role: $('#RoleSelectionCombo').val(),
            onlyLockedUsers: $('#UsersTable_OnlyLockedUsers').is(':checked'),
          };
        },
      },
      columnDefs: [
        {
          className: 'dtr-control responsive',
          orderable: false,
          render: function () {
            return '';
          },
          targets: 0,
        },
        {
          targets: 1,
          data: null,
          orderable: false,
          autoWidth: false,
          defaultContent: '',
          rowAction: {
            text:
              '<i class="fa fa-cog"></i> <span class="d-none d-md-inline-block d-lg-inline-block d-xl-inline-block">' +
              app.localize('Actions') +
              '</span> <span class="caret"></span>',
            items: [
              {
                text: app.localize('LoginAsThisUser'),
                visible: function (data) {
                  return _permissions.impersonation && data.record.id !== abp.session.userId;
                },
                action: function (data) {
                  abp.ajax({
                    url: abp.appPath + 'Account/ImpersonateUser',
                    data: JSON.stringify({
                      tenantId: abp.session.tenantId,
                      userId: data.record.id,
                    }),
                  });
                },
              },
              {
                text: app.localize('Edit'),
                visible: function () {
                  return _permissions.edit;
                },
                action: function (data) {
                  _createOrEditModal.open({ id: data.record.id });
                },
              },
              {
                text: app.localize('Permissions'),
                visible: function () {
                  return _permissions.changePermissions;
                },
                action: function (data) {
                  _userPermissionsModal.open({ id: data.record.id });
                },
              },
              {
                text: app.localize('Unlock'),
                visible: function (data) {
                  return _permissions.unlock && data.record.lockoutEndDateUtc;
                },
                action: function (data) {
                  _userService
                    .unlockUser({
                      id: data.record.id,
                    })
                    .done(function () {
                      abp.notify.success(app.localize('UnlockedTheUser', data.record.userName));
                      dataTable.ajax.reload()
                    });
                },
              },
              {
                text: app.localize('DynamicProperties'),
                visible: function () {
                  return _dynamicEntityPropertyManager.canShow(
                    'Adaro.Centralize.Authorization.Users.User'
                  );
                },
                action: function (data) {
                  _dynamicEntityPropertyManager.modal.open({
                    entityFullName: 'Adaro.Centralize.Authorization.Users.User',
                    rowId: data.record.id,
                  });
                },
              },
              {
                text: app.localize('Delete'),
                visible: function () {
                  return _permissions.delete;
                },
                action: function (data) {
                  deleteUser(data.record);
                },
              },
            ],
          },
        },
        {
          targets: 2,
          data: 'userName',
          render: function (userName, type, row, meta) {
            var $container = $('<span/>');
            var $userName = $('<span/>');
            var lockedIcon = '<i class="fas fa-lock ms-2"></i>';
            var profilePicture =
             abp.appPath + 'Profile/GetProfilePictureByUser?userId=' + row.id + '&profilePictureId=' + row.profilePictureId;

            if (profilePicture) {
              var $link = $('<a/>').attr('href', profilePicture).attr('target', '_blank');
              var $img = $('<img/>').addClass('img-circle').attr('src', profilePicture);

              $link.append($img);
              $container.append($link);
            }
            
            $userName.append(userName);

            if (row.lockoutEndDateUtc) {
              if (moment.utc(row.lockoutEndDateUtc) > moment.utc()) {
                $userName.append(lockedIcon);
              }
            }
              
            $container.append($userName);
            return $container[0].outerHTML;
          },
        },
        {
          targets: 3,
          data: 'name',
        },
        {
          targets: 4,
          data: 'surname',
        },
        {
          targets: 5,
          data: 'roles',
          orderable: false,
          render: function (roles) {
            var roleNames = '';
            for (var j = 0; j < roles.length; j++) {
              if (roleNames.length) {
                roleNames = roleNames + ', ';
              }

              roleNames = roleNames + roles[j].roleName;
            }

            return roleNames;
          },
        },
        {
          targets: 6,
          data: 'emailAddress',
        },
        {
          targets: 7,
          data: 'isEmailConfirmed',
          render: function (isEmailConfirmed) {
            var $span = $('<span/>').addClass('label');
            if (isEmailConfirmed) {
              $span.addClass('badge badge-success').text(app.localize('Yes'));
            } else {
              $span.addClass('badge badge-dark').text(app.localize('No'));
            }
            return $span[0].outerHTML;
          },
        },
        {
          targets: 8,
          data: 'isActive',
          render: function (isActive) {
            var $span = $('<span/>').addClass('label');
            if (isActive) {
              $span.addClass('badge badge-success').text(app.localize('Yes'));
            } else {
              $span.addClass('badge badge-dark').text(app.localize('No'));
            }
            return $span[0].outerHTML;
          },
        },
        {
          targets: 9,
          data: 'creationTime',
          render: function (creationTime) {
            return moment(creationTime).format('L');
          },
        },
      ],
    });

    function getUsers() {
      dataTable.ajax.reload();
    }

    function deleteUser(user) {
      if (user.userName === app.consts.userManagement.defaultAdminUserName) {
        abp.message.warn(app.localize('{0}UserCannotBeDeleted', app.consts.userManagement.defaultAdminUserName));
        return;
      }

      abp.message.confirm(
        app.localize('UserDeleteWarningMessage', user.userName),
        app.localize('AreYouSure'),
        function (isConfirmed) {
          if (isConfirmed) {
            _userService
              .deleteUser({
                id: user.id,
              })
              .done(function () {
                getUsers(true);
                abp.notify.success(app.localize('SuccessfullyDeleted'));
              });
          }
        }
      );
    }

    $('#ShowAdvancedFiltersSpan').click(function () {
      $('#ShowAdvancedFiltersSpan').hide();
      $('#HideAdvancedFiltersSpan').show();
      $('#AdvacedAuditFiltersArea').slideDown();
    });

    $('#HideAdvancedFiltersSpan').click(function () {
      $('#HideAdvancedFiltersSpan').hide();
      $('#ShowAdvancedFiltersSpan').show();
      $('#AdvacedAuditFiltersArea').slideUp();
    });

    $('#CreateNewUserButton').click(function () {
      _createOrEditModal.open();
    });

    var getSortingFromDatatable = function () {
      if (dataTable.ajax.params().order.length > 0) {
        var columnIndex = dataTable.ajax.params().order[0].column;
        var dir = dataTable.ajax.params().order[0].dir;
        var columnName = dataTable.ajax.params().columns[columnIndex].data;

        return columnName + ' ' + dir;
      } else {
        return '';
      }
    };

    $('#ExportUsersToExcelButton').click(function (e) {
      e.preventDefault();
      _userService
        .getUsersToExcel({
          filter: $('#UsersTableFilter').val(),
          permissions: _selectedPermissionNames,
          role: $('#RoleSelectionCombo').val(),
          onlyLockedUsers: $('#UsersTable_OnlyLockedUsers').is(':checked'),
          sorting: getSortingFromDatatable(),
        })
        .done(function (result) {
          app.downloadTempFile(result);
        });
    });

    $('#GetUsersButton, #RefreshUserListButton').click(function (e) {
      e.preventDefault();
      getUsers();
    });

    $('#UsersTableFilter').on('keydown', function (e) {
      if (e.keyCode !== 13) {
        return;
      }

      e.preventDefault();
      getUsers();
    });

    abp.event.on('app.createOrEditUserModalSaved', function () {
      getUsers();
    });

    $('#UsersTableFilter').focus();

    $('#ImportUsersFromExcelButton')
      .fileupload({
        url: abp.appPath + 'Users/ImportFromExcel',
        dataType: 'json',
        maxFileSize: 1048576 * 100,
        dropZone: $('#UsersTable'),
        done: function (e, response) {
          var jsonResult = response.result;
          if (jsonResult.success) {
            abp.notify.info(app.localize('ImportUsersProcessStart'));
          } else {
            abp.notify.warn(app.localize('ImportUsersUploadFailed'));
          }
        },
      })
      .prop('disabled', !$.support.fileInput)
      .parent()
      .addClass($.support.fileInput ? undefined : 'disabled');

    $('#FilterByPermissionsButton').click(function () {
      _$permissionFilterModal.open({ grantedPermissionNames: _selectedPermissionNames });
    });
  });
})();

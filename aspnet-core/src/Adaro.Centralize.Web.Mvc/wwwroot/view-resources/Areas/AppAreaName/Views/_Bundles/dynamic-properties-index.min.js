var PermissionsTree = (function ($) {
  return function () {
    var $tree;

    function initFiltering() {
      var to = false;
      $('#PermissionTreeFilter').keyup(function () {
        if (to) {
          clearTimeout(to);
        }
        to = setTimeout(function () {
          var v = $('#PermissionTreeFilter').val();
          if ($tree.jstree(true)) {
            $tree.jstree(true).search(v);
          }
        }, 250);
      });
    }

    function init($treeContainer, options) {
      $tree = $treeContainer;
      initialized = false;
      var _jsTreeOptions = {
        types: {
          default: {
            icon: 'fa fa-folder text-warning',
          },
          file: {
            icon: 'fa fa-file text-warning',
          },
        },
        checkbox: {
          keep_selected_style: false,
          three_state: false,
          cascade: '',
        },
        search: {
          show_only_matches: true,
        },
        plugins: ['checkbox', 'types', 'search'],
      };

      if (options) {
        if (options.singleSelect && options.singleSelect === true) {
          $.extend(_jsTreeOptions, {
            core: {
              multiple: false,
            },
          });
        }
      }

      $tree.jstree(_jsTreeOptions);
      if (
        !(
          options &&
          ((options.singleSelect && options.singleSelect === true) ||
            (options.disableCascade && options.disableCascade === true))
        )
      ) {
        $tree.on('changed.jstree', function (e, data) {
          if (!data.node) {
            return;
          }

          var childrenNodes;

          if (data.node.state.selected) {
            selectNodeAndAllParents($tree.jstree('get_parent', data.node));

            childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
            $tree.jstree('select_node', childrenNodes);
          } else {
            childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
            $tree.jstree('deselect_node', childrenNodes);
          }
        });
      }

      initFiltering();
    }

    function selectNodeAndAllParents(node) {
      $tree.jstree('select_node', node, true);
      var parent = $tree.jstree('get_parent', node);
      if (parent) {
        selectNodeAndAllParents(parent);
      }
    }

    function getSelectedPermissionNames() {
      var permissionNames = [];

      var selectedPermissions = $tree.jstree('get_selected', true);
      for (var i = 0; i < selectedPermissions.length; i++) {
        permissionNames.push(selectedPermissions[i].id);
      }

      return permissionNames;
    }

    return {
      init: init,
      getSelectedPermissionNames: getSelectedPermissionNames,
    };
  };
})(jQuery);

(function () {
  app.modals.PermissionTreeModal = function () {
    var _modalManager;
    var _permissionsTree = null;

    var _options = {
      onSelectionDone: function () {},
    };

    this.init = function (modalManager) {
      _modalManager = modalManager;
      _options = $.extend(_options, _modalManager.getOptions().options);

      _permissionsTree = new PermissionsTree();
      _permissionsTree.init(
        _modalManager.getModal().find('#PermissionFilterTree .permission-tree'),
        _modalManager.getOptions().options
      );

      _modalManager.onBeforeClose(function () {
        if (typeof _options.onSelectionDone == 'function') {
          _options.onSelectionDone(_permissionsTree.getSelectedPermissionNames());
        }
      });
    };
  };

  app.modals.PermissionTreeModal.create = function (options) {
    return new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/Common/PermissionTreeModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/Common/Modals/_PermissionTreeModal.js',
      modalClass: 'PermissionTreeModal',
      options: options,
      removeAllOnCloseBindsAfterModalClose: true,
    });
  };
})();

(function () {
  app.modals.CreateOrEditDynamicPropertyModal = function () {
    var _modalManager;
    var _dynamicPropertyAppServices = abp.services.app.dynamicProperty;

    var _$permissionFilterModal = app.modals.PermissionTreeModal.create({
      singleSelect: true,
      onSelectionDone: function (filteredPermissions) {
        if (filteredPermissions && filteredPermissions.length > 0) {
          _modalManager.getModal().find('input[name=permission]').val(filteredPermissions[0]);
        }
      },
    });

    this.init = function (modalManager) {
      _modalManager = modalManager;
    };

    this.save = function () {
      var dynamicProperty = {
        id: _modalManager.getModal().find('input[name=Id]').val(),
        propertyName: _modalManager.getModal().find('input[name=propertyName]').val(),
        displayName: _modalManager.getModal().find('input[name=displayName]').val(),
        permission: _modalManager.getModal().find('input[name=permission]').val(),
        inputType: _modalManager.getModal().find('select[name=inputType]').val(),
      };

      if (dynamicProperty.propertyName.trim() === '') {
        abp.notify.success(app.localize('XCanNotBeNullOrEmpty', app.localize('PropertyName')));
        return;
      }
      _modalManager.setBusy(true);

      if (dynamicProperty.id) {
        _dynamicPropertyAppServices
          .update(dynamicProperty)
          .done(function () {
            abp.notify.info(app.localize('SavedSuccessfully'));
            _modalManager.close();
            abp.event.trigger('app.createOrEditDynamicPropertyModalSaved');
          })
          .always(function () {
            _modalManager.setBusy(false);
          });
      } else {
        _dynamicPropertyAppServices
          .add(dynamicProperty)
          .done(function () {
            abp.notify.info(app.localize('SavedSuccessfully'));
            _modalManager.close();
            abp.event.trigger('app.createOrEditDynamicPropertyModalSaved');
          })
          .always(function () {
            _modalManager.setBusy(false);
          });
      }
    };

    $('#FilterByPermissionsButton').click(function () {
      _$permissionFilterModal.open({ grantedPermissionNames: [] });
    });
  };
})();

(function () {
  $(function () {
    var _table = $('#DynamicPropertiesTable');
    var _dynamicPropertyAppService = abp.services.app.dynamicProperty;
    var _initialized = false;
    var _dataTable;
    var _permissions = {
      edit: abp.auth.hasPermission('Pages.Administration.DynamicProperties.Edit'),
      delete: abp.auth.hasPermission('Pages.Administration.DynamicProperties.Delete'),
      dynamicPropertyValue_edit: abp.auth.hasPermission('Pages.Administration.DynamicPropertyValue.Edit'),
    };

    var _createOrEditModal = new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/DynamicProperty/CreateOrEditModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/DynamicProperties/_CreateOrEditModal.js',
      modalClass: 'CreateOrEditDynamicPropertyModal',
      cssClass: 'scrollable-modal',
    });

    var _manageValuesModal = new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/DynamicProperty/ManageValuesModal',
      scriptUrl:
        abp.appPath + 'view-resources/Areas/AppAreaName/Views/_Bundles/dynamic-properties-manage-values.min.js',
      modalClass: 'ManageDynamicPropertyValueModal',
      cssClass: 'scrollable-modal',
    });

    function initializeTable() {
      if (_initialized) {
        return;
      }
      _initialized = true;
      _dataTable = _table.DataTable({
        paging: false,
        serverSide: false,
        processing: false,
        listAction: {
          ajaxFunction: _dynamicPropertyAppService.getAll,
        },
        columnDefs: [
          {
            className: 'dtr-control responsive',
            orderable: false,
            render: function () {
              return '';
            },
            targets: 0,
          },
          {
            targets: 1,
            data: null,
            orderable: false,
            autoWidth: false,
            defaultContent: '',
            rowAction: {
              text:
                '<i class="fa fa-cog"></i> <span class="d-none d-md-inline-block d-lg-inline-block d-xl-inline-block">' +
                app.localize('Actions') +
                '</span> <span class="caret"></span>',
              items: [
                {
                  text: app.localize('Edit'),
                  visible: function (data) {
                    return _permissions.edit;
                  },
                  action: function (data) {
                    _createOrEditModal.open({ id: data.record.id });
                  },
                },
                {
                  text: app.localize('Delete'),
                  visible: function (data) {
                    return _permissions.delete;
                  },
                  action: function (data) {
                    deleteProperty(data.record.id);
                  },
                },
                {
                  text: app.localize('EditValues'),
                  visible: function (data) {
                    var _inputTypeManager = abp.inputTypeProviders.getInputTypeInstance(data.record.inputType);
                    return _permissions.dynamicPropertyValue_edit && _inputTypeManager.hasValues;
                  },
                  action: function (data) {
                    _manageValuesModal.open({ id: data.record.id });
                  },
                },
              ],
            },
          },
          {
            targets: 2,
            data: 'propertyName',
          },
          {
            targets: 3,
            data: 'displayName',
          },
          {
            targets: 4,
            data: 'inputType',
          },
          {
            targets: 5,
            data: 'permission',
          },
        ],
      });
    }

    $('#CreateNewDynamicProperty').click(function () {
      _createOrEditModal.open();
    });

    $('#GetDynamicPropertiesButton').click(function (e) {
      e.preventDefault();
      loadDynamicProperties();
    });

    function loadDynamicProperties() {
      if (!_initialized) {
        return;
      }
      _dataTable.ajax.reload();
    }

    abp.event.on('app.createOrEditDynamicPropertyModalSaved', function () {
      loadDynamicProperties();
    });

    function deleteProperty(id) {
      abp.message.confirm(
        app.localize('DeleteDynamicPropertyMessage'),
        app.localize('AreYouSure'),
        function (isConfirmed) {
          if (isConfirmed) {
            abp.ui.setBusy();
            _dynamicPropertyAppService
              .delete(id)
              .done(function () {
                loadDynamicProperties();
                abp.notify.success(app.localize('SuccessfullyDeleted'));
              })
              .always(function () {
                abp.ui.clearBusy();
              });
          }
        }
      );
    }

    initializeTable();
  });
})();

(function () {
  $.validator.addMethod(
    'regex',
    function (value, element, regexp) {
      return this.optional(element) || regexp.test(value);
    },
    abp.localization.localize('InvalidPattern')
  );

  app.modals.CreateOrEditWebhookSubscriptionModal = function () {
    var _modalManager;
    var _webhookSubscriptionService = abp.services.app.webhookSubscription;
    var _headerKeyValueManager = new KeyValueListManager();
    var $webhookSubscriptionForm = null;

    this.init = function (modalManager) {
      _modalManager = modalManager;
      _modalManager.getModal().find('#Webhooks').select2();

      $webhookSubscriptionForm = _modalManager.getModal().find('form[name=WebhookSubscriptionForm]');
      $webhookSubscriptionForm.validate({
        rules: {
          webhookUri: {
            required: true,
            regex:
              /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/,
          },
        },
      });

      initializeHeaderKeyValueManager();
    };

    this.save = function () {
      if (!$webhookSubscriptionForm.valid()) {
        return;
      }

      var headers = {};
      _headerKeyValueManager.getValues().forEach((x) => {
        headers[x.key] = x.value;
      });

      var subscription = {
        id: _modalManager.getModal().find('input[name=Id]').val(),
        webhookUri: _modalManager.getModal().find('#webhookEndpointURL').val(),
        webhooks: _modalManager.getModal().find('#Webhooks').val(),
        headers: headers,
      };

      _modalManager.setBusy(true);

      if (createOrEditIsEdit) {
        _webhookSubscriptionService
          .updateSubscription(subscription)
          .done(function () {
            abp.notify.info(app.localize('SavedSuccessfully'));
            _modalManager.close();
            abp.event.trigger('app.createOrEditWebhookSubscriptionModalSaved');
          })
          .always(function () {
            _modalManager.setBusy(false);
          });
      } else {
        _webhookSubscriptionService
          .addSubscription(subscription)
          .done(function () {
            abp.notify.info(app.localize('SavedSuccessfully'));
            _modalManager.close();
            abp.event.trigger('app.createOrEditWebhookSubscriptionModalSaved');
          })
          .always(function () {
            _modalManager.setBusy(false);
          });
      }
    };

    function initializeHeaderKeyValueManager() {
      var keys = Object.keys(createOrEditHeaders);
      var items = [];
      if (createOrEditHeaders && keys.length > 0) {
        items = keys.map((x) => {
          return {
            key: x,
            value: createOrEditHeaders[x],
          };
        });
      }

      _headerKeyValueManager.init({
        containerId: 'additional-header-list',
        name: 'openIdConnectClaimsMappings',
        keyName: 'HeaderKey',
        valueName: 'HeaderValue',
        items: items,
      });
    }
  };
})();

(function () {
  $(function () {
    var _table = $('#SubscriptionTable');
    var _webhookSubscriptionService = abp.services.app.webhookSubscription;

    var _permissions = {
      create: abp.auth.hasPermission('Pages.Administration.WebhookSubscription.Create'),
      edit: abp.auth.hasPermission('Pages.Administration.WebhookSubscription.Edit'),
      changeActivity: abp.auth.hasPermission('Pages.Administration.WebhookSubscription.ChangeActivity'),
      detail: abp.auth.hasPermission('Pages.Administration.WebhookSubscription.Detail'),
    };

    var _createOrEditModal = new app.ModalManager({
      viewUrl: abp.appPath + 'AppAreaName/WebhookSubscription/CreateModal',
      scriptUrl: abp.appPath + 'view-resources/Areas/AppAreaName/Views/WebhookSubscriptions/_CreateOrEditModal.js',
      modalClass: 'CreateOrEditWebhookSubscriptionModal',
      cssClass: 'scrollable-modal',
    });

    var dataTable = _table.DataTable({
      paging: false,
      serverSide: false,
      processing: false,
      listAction: {
        ajaxFunction: _webhookSubscriptionService.getAllSubscriptions,
      },
      columnDefs: [
        {
          className: 'dtr-control responsive',
          orderable: false,
          render: function () {
            return '';
          },
          targets: 0,
        },
        {
          targets: 1,
          data: null,
          orderable: false,
          defaultContent: '',
          visible: _permissions.detail,
          rowAction: {
            element: $('<button/>')
              .addClass('btn btn-sm btn-primary')
              .text(app.localize('Details'))
              .click(function () {
                goToDetail($(this).data().id);
              }),
          },
        },
        {
          targets: 2,
          data: 'webhookUri',
        },
        {
          targets: 3,
          data: 'webhooks',
          render: function (webhooks) {
            var result = '';
            if (webhooks && webhooks.length > 0) {
              for (var i = 0; i < webhooks.length; i++) {
                if (i > 2) {
                  result += '. . .';
                  return result;
                }
                var webhook = webhooks[i];
                result += webhook + '<br/>';
              }
            }
            return result;
          },
        },
        {
          targets: 4,
          data: 'isActive',
          render: function (isActive) {
            var $span = $('<span/>').addClass('label');
            if (isActive) {
              $span.addClass('badge badge-success').text(app.localize('Yes'));
            } else {
              $span.addClass('badge badge-dark').text(app.localize('No'));
            }

            return $span[0].outerHTML;
          },
        },
      ],
    });

    function goToDetail(id) {
      if (id) {
        window.location = '/AppAreaName/WebhookSubscription/Detail/' + id;
      }
    }

    $('#CreateNewWebhookSubscription').click(function () {
      _createOrEditModal.open();
    });

    $('#GetSubscriptionsButton').click(function (e) {
      e.preventDefault();
      getWebhooks();
    });

    function getWebhooks() {
      dataTable.ajax.reload();
    }

    abp.event.on('app.createOrEditWebhookSubscriptionModalSaved', function () {
      getWebhooks();
    });
  });
})();
